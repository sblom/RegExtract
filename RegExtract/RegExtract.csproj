<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;netstandard2.1;net40</TargetFrameworks>
    <Nullable>enable</Nullable>
    <LangVersion>Latest</LangVersion>
  </PropertyGroup>

  <!-- NuGet package config -->
  <PropertyGroup>
    <Description>Clean &amp; simple, idiomatic C# RegEx-based line parser.

RegExtract takes a string and a regular expression template and deserializes to a provided type. Works especially well with records and tuples, but can extract to any type that provides either a `static T Parse(string)` method or a single-string constructor (`T(string)`).

See more docs at project page: https://github.com/sblom/RegExtract
</Description>
    <Authors>Scott Blomquist</Authors>
    <Copyright>Copyright Â© Scott Blomquist. All rights reserved.</Copyright>
    <Company />
    <Product />
    <PackageProjectUrl>https://github.com/sblom/RegExtract</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageTags>regex parse parser reader deserialize deserializer valuetuple record deserialization parsing regular-expression regular-expressions regular expression expressions type string tuple linqpad-samples</PackageTags>
    <PackageIcon>icon.png</PackageIcon>
  </PropertyGroup>
  
  <!-- SourceLink configuration -->
  <PropertyGroup>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
  </PropertyGroup>

  <!-- SourceLink configuration -->
  <ItemGroup Condition="'$(GITHUB_ACTIONS)' == 'true'">
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" />
  </ItemGroup>

  <!-- SourceLink configuration -->
  <PropertyGroup Condition="'$(GITHUB_ACTIONS)' == 'true'">
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
    <DeterministicSourcePaths>true</DeterministicSourcePaths>
  </PropertyGroup>

  <PropertyGroup>
    <AssemblyVersion>$(GITVERSION_ASSEMBLYSEMVER)</AssemblyVersion>
    <AssemblyFileVersion>$(GITVERSION_ASSEMBLYFILESEMVER)</AssemblyFileVersion>
    <AssemblyVersion Condition="'$(AssemblyVersion)' == ''">0.0.0.0</AssemblyVersion>
    <AssemblyFileVersion Condition="'$(AssemblyFileVersion)' == ''">0.0.0.0</AssemblyFileVersion>
  </PropertyGroup>

  <ItemGroup>
    <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
      <_Parameter1>RegExtract.Test</_Parameter1>
    </AssemblyAttribute>
    <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleToAttribute" Condition="'$(Configuration)' == 'Debug'">
      <_Parameter1>LINQPadQuery</_Parameter1>
    </AssemblyAttribute>
  </ItemGroup>

  <ItemGroup>
    <None Include="..\doc\linqpad-samples\**" Pack="True" PackagePath="linqpad-samples">
      <Visible>false</Visible>
    </None>
    <None Include="..\images\icon.png" Pack="True" PackagePath="\">
      <Visible>false</Visible>
    </None>
  </ItemGroup>

  <ItemGroup>
    <None Include="..\doc\**" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'NET40'">
    <PackageReference Include="System.ValueTuple" Version="4.5.0" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="PolySharp" Version="1.14.1">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

</Project>
